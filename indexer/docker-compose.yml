version: '3.8'

services:
  postgres:
    image: postgres:latest
    environment:
      - POSTGRES_USER=db_username
      - POSTGRES_PASSWORD=db_password
      - POSTGRES_DB=db_name
      - PGDATA=/data/postgres
      - POSTGRES_HOST_AUTH_METHOD=trust
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -q -U db_username -d db_name" ]
    ports:
      - "5434:5432"
    volumes:
      - postgres_data:/data/postgres
      - ./migrations:/docker-entrypoint-initdb.d/

  migrations:
    build:
      context: ..
      dockerfile: indexer/Dockerfile
    command: ["indexer", "migrate"]
    volumes:
      - ./indexer.toml:/indexer/indexer.toml
    depends_on:
      postgres:
        condition: service_healthy

  indexer:
    build:
      context: ..
      dockerfile: indexer/Dockerfile
    command: ["indexer", "index"]
    ports:
      - "8080:8080",
      - "7300:7300",
    volumes:
      - ./indexer.toml:/indexer/indexer.toml
    depends_on:
      postgres:
        condition: service_healthy
      migrations:
        condition: service_started

  api:
    build:
      context: ..
      dockerfile: indexer/Dockerfile
    command: ["indexer", "api"]
    ports:
      - "8081:8080"
      - "7031:7300"
    healthcheck:
      test: wget localhost:8080/healthz -q -O - > /dev/null 2>&1
    volumes:
      - ./indexer.toml:/indexer/indexer.toml
    depends_on:
      postgres:
        condition: service_healthy
        
  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_ADMIN_PWD}
    volumes:
      - ./ops/grafana/provisioning:/etc/grafana/provisioning
      - ./ops/grafana/dashboards:/var/lib/grafana/dashboards
    security_opt:
      - "no-new-privileges:true"
    depends_on:
      indexer:
        condition: service_healthy
      api:
        condition: service_healthy

  ui:
    build:
      context: ..
      dockerfile: indexer/ui/Dockerfile
    environment:
      - DATABASE_URL=${DATABASE_URL:-postgresql://db_username:db_password@postgres:5432/db_name}
    ports:
      - 5555:5555
    healthcheck:
      test: wget localhost:5555 -q -O - > /dev/null 2>&1
    depends_on:
      postgres:
        condition: service_healthy

  prisma-check: 
    restart: "no"
    build:
      context: ..
      dockerfile: indexer/ui/Dockerfile
    command: ./prisma.sh --check
    environment:
      - DATABASE_URL=${DATABASE_URL:-postgresql://db_username:db_password@postgres:5432/db_name}
    depends_on:
      indexer:
        condition: service_healthy
      postgres:
        condition: service_healthy

volumes:
  postgres_data:
